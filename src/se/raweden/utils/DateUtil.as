package se.raweden.utils{	/**	 * The <code>DateUtil</code> class contains utility method that extends the flash date api.	 *	 * <p>Copyright 2011 Raweden. All rights reserved.</p>	 *	 * @author Raweden	 */	public class DateUtil{				private static const MINUTE:int = 60;		private static const HOUR:int = 3600;		private static const DAY:int = 86400;		private static const WEEK:int = 604800;		private static const MONTH:int = 2629800;		private static const YEAR:int = 31557600;				/**		 * Returns a clone of a <code>Date</code> object.		 * 		 * @param date The Date object to be cloned.		 * @return A Clone of the Date as date argument or null if no argument where specified.		 */				public static function clone(date:Date):Date{			if(date){				var clone:Date = new Date();				clone.setTime( date.getTime());				return clone;			}						return null;		}						//------------------------------------		// Handling Unix-Timestamps.		//------------------------------------				/**		 * Returns the Unix Timestamp from a <code>Date</code> Object.		 * 		 * @param date		 * @return Unix-timestamp, a the number of seconds since Jan 1, 1970 that a Date object represents.		 */				public static function to(date:Date):int{			return date ? date.getTime()/1000 : 0;		}				/**		 * 		 */				/**		 * Returns or modifies a Date object from a Unix-timestamp.		 * 		 * @param timestamp Unix-timestamp, a the number of seconds since Jan 1, 1970 that a Date object represents.		 * @param date A optional date to be modified.		 * @return 		 */				public static function from(timestamp:int,date:Date = null):Date{			date = date || new Date();			date.setTime(timestamp*1000);			return date;		}				/**		 * Returns the current Unix-Timestamp.		 * 		 * @return Unix-timestamp, a the number of seconds since Jan 1, 1970 that a Date object represents.		 */		public static function get timestamp():int{			return new Date().getTime()/1000;		}				//------------------------------------		// Getting Relative Time to Human-Readable.		//------------------------------------						/**		 * Returns a Human-reable representation of past and feature time.		 * 		 * @param time The diffrence in time specified in secounds, the value can be nagative or positive.		 * @return The difference in time represented as a Human-readable String.		 */				public static function relativeTime(time:int):String{			var scope:String = time > 0 ? "ago" : "left";			//time = Math.abs(time/1000);			var amunt:Number;			var unit:String;			// if the span is less than a minute.			if(time < MINUTE){				return "moments "+scope;			}			// if the span is less than an hour.			if(time < HOUR){				amunt = Math.ceil(time/MINUTE);				unit = amunt == 1 ? "minute" : "minutes";			}// if the span is less than a day ago.			else if(time < DAY){				amunt = Math.ceil(time/HOUR);				unit = amunt == 1 ? "hour" : "hours";			}// if the span is less than a day ago.			else if(time < WEEK){				amunt = Math.round(time/DAY);				unit = amunt == 1 ? "day" : "days";			}// if the span is less than a day ago.			else if(time < MONTH){				amunt = Math.round(time/WEEK);				unit = amunt == 1 ? "week" : "weeks";			}// if the span is less than a day ago.			else if(time < YEAR){				amunt = Math.round(time/MONTH);				unit = amunt == 1 ? "month" : "months";			}			else{				amunt = Math.ceil(time/YEAR);				unit = amunt == 1 ? "year" : "years";			}			//return amunt == 1 ? ( "one " + unit + " " + scope ) : ( amunt  + " " + unit + " " + scope );			return ( amunt  + " " + unit + " " + scope );		}			}}
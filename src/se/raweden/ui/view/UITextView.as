////	UIText.as//	Core UI Framework////	Created by Raweden on 2011-05-22//	Copyright 2011 Raweden. Some rights reserved.//package se.raweden.ui.view{	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.text.AntiAliasType;	import flash.text.GridFitType;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.text.TextFormat;		import se.raweden.core.core;
		/**	 * A <code>UIText</code> component 	 * 	 * @copyright Copyright 2011 Raweden. All rights reserved.	 * @author Raweden	 */	public class UITextView extends UIScrollView{				use namespace core;				//		// TODO: extend the UIScrollView and add supprt for composite render.		// TODO: use the advanced text engine api to render the text.		//				// attributes.		private var m_displayAsHtml:Boolean = false;		// related views.		private var m_content:Sprite;		private var m_render:TextField;				public function UITextView(parent:DisplayObjectContainer = null){			super(parent);			// initilizes the text view.			addChildren();			init();		}				// adding childs of the Text component.		private function addChildren():void{			m_render = new TextField();			m_render.defaultTextFormat = new TextFormat("Helvetica",13);			m_render.embedFonts = false;			m_render.autoSize = TextFieldAutoSize.LEFT;			m_render.gridFitType = GridFitType.SUBPIXEL;			m_render.x = 10;			m_render.y = 4;			m_content = new Sprite();			m_content.addChild(m_render);			super.content = m_content;		}				// setting the default setup for the Text component.		private function init():void{			this.editable = false;			this.wordWrap = true;			// setting the default size.			resize(640,360);		}						//------------------------------------ 		//	Configuring the UIText view.		//------------------------------------ 				/**		 * Determines if the Text component is editable.		 * 		 * @default <code>false</code>		 */		public function set editable(value:Boolean):void{			m_render.selectable = value;			m_render.mouseEnabled = value;			m_render.type = value ? TextFieldType.INPUT : TextFieldType.DYNAMIC;		}		// 		public function get editable():Boolean{			return(m_render.type == TextFieldType.INPUT);		}				/**		 * Specifies the text of this UIText view.		 */		public function set text(value:String):void{			if(m_displayAsHtml){				m_render.htmlText = value;			}else{				m_render.text = value;			}					setNeedsLayout();			setNeedsDisplay();		}		// returns the current text set as label.		public function get text():String{			return m_displayAsHtml ? m_render.htmlText : m_render.text;		}				/**		 * A Boolean value that determine whether the string of the text properity should be renderd as html.		 * 		 * @default <code>false</code>		 */		public function set displayAsHtml(value:Boolean):void{			if(value !=	m_displayAsHtml){				if(value){					m_render.htmlText = m_render.text;				}else{					m_render.text = m_render.htmlText;				}				m_displayAsHtml = value;					// display needs to update as the size may change.				setNeedsDisplay();				setNeedsLayout();			}		}		// returns if display as html is active.		public function get displayAsHtml():Boolean{			return m_displayAsHtml;		}				/**		 * A Boolean value that determine whether the 		 * 		 * @default <code>false</code>		 */		public function set wordWrap(value:Boolean):void{			m_render.wordWrap = value;			setNeedsLayout();		}		// 		public function get wordWrap():Boolean{			return(m_render.wordWrap);		}				/**		 * A Boolean value that determine whether the 		 * 		 * @default <code>true</code>		 */		public function set selectable(value:Boolean):void{			m_render.selectable = value;			setNeedsLayout();		}		// 		public function get selectable():Boolean{			return(m_render.selectable);		}				public function setTextFormat(format:TextFormat,beginIndex:int = -1,endIndex:int = -1):void{			m_render.setTextFormat(format,beginIndex,endIndex);			setNeedsLayout();		}				/**		 * 		 */		public function set defaultTextFormat(value:TextFormat):void{			m_render.defaultTextFormat = value;		}		// returns the texformat that is set as the default text format.		public function get defaultTextFormat():TextFormat{			return m_render.defaultTextFormat;		}				//------------------------------------		// Wokring with Characters.		//------------------------------------				/**		 * @copy flash.text.TextField#appendText()		 */		public function appendText(newText:String):void{			m_render.appendText(newText);			// needs to refresh display as the bounds may have changed.			setNeedsLayout();			setNeedsDisplay();		}				/**		 * @copy flash.text.TextField#getCharIndexAtPoint()		 */		public function getCharIndexAtPoint(x:Number,y:Number):int{			var point:Point = m_render.globalToLocal( localToGlobal( new Point(x,y)));			return m_render.getCharIndexAtPoint(point.x,point.y);		}				/**		 * @copy flash.text.TextField#setSelection()		 */		public function setSelection(beginIndex:int,endIndex:int):void{			return m_render.setSelection(beginIndex,endIndex);		}				/**		 * @copy flash.text.TextField#selectionBeginIndex		 */		public function get selectionBeginIndex():int{			return m_render.selectionBeginIndex;		}						/**		 * @copy flash.text.TextField#selectionEndIndex		 */		public function get selectionEndIndex():int{			return m_render.selectionEndIndex;		}				/**		 * @copy flash.text.TextField#replaceText()		 */		public function replaceText(beginIndex:int,endIndex:int,newText:String):void{			m_render.replaceText(beginIndex,endIndex,newText);			// needs to refresh display as the bounds may have changed.			setNeedsLayout();			setNeedsDisplay();		}				//------------------------------------		// Respond to User Interaction		//------------------------------------								//------------------------------------		// Updating Content Displayed.		//------------------------------------				/**		 * @inheritDoc		 */		override protected function draw(rect:Rectangle):void{			var w:int = rect.width;			var h:int = rect.height;			// drawing the background color for the main scrollview.			this.graphics.clear();			this.graphics.beginFill(0x000000,0.05);			this.graphics.drawRect(0,0,w,h);			this.graphics.endFill();			// determine the maximum height/width.			w = Math.max(w,m_render.width+24);			h = Math.max(h,m_render.height+8);			// drawing background color behind the text.			var color:uint = backgroundColor;			m_content.graphics.clear();			m_content.graphics.beginFill(color);			m_content.graphics.drawRect(0,0,w,h);			m_content.graphics.endFill();		}				/**		 * @inheritDoc		 */		override protected function layout(rect:Rectangle):void{			if(this.wordWrap)				m_render.width = rect.width-24;			super.layout(rect);		}				//------------------------------------		// Deconstruction		//------------------------------------				/**		 * @inheritDoc		 */		override public function dispose():void{			// destoying the super implemenation.			super.dispose();		}		}}
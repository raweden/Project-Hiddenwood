////	UIImageView.as//	Core UI Framework////	Created by Raweden on 2011-07-24//	Copyright 2011 Raweden. Some rights reserved.//package se.raweden.ui.view{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObjectContainer;	import flash.geom.Rectangle;		/**	 * A <code>UIImageView</code> provides a view-based container for displaying a single image.	 * 	 * @copyright Copyright 2011 Raweden. All rights reserved.	 * @author Raweden	 */	public class UIImageView extends UIView{				//		// TODO: implemenet a alternative way to render the images with the source property holding the current BitmapData.		// TODO: add support for animated images.		// TODO: write better documentation.		// TODO: use UIView.mode to determine how the image render Bitmap is scaled.		//				// image render properties.		private var m_canvas:Bitmap;		private var m_source:BitmapData;		// static image properties.		private var m_image:BitmapData;		private var m_highlightedImage:BitmapData;		// image view attributes.		private var m_smoothing:Boolean = false;		private var m_interactive:Boolean = false;		private var m_highlighted:Boolean = false;				/**		 * Constructor.		 */		public function UIImageView(parent:DisplayObjectContainer = null,image:BitmapData = null,highlightedImage:BitmapData = null){			super(parent);			addChildren();			// setting images from constuctor.			this.image = image;			this.highlightedImage = highlightedImage;		}				// adding composite views to this UIImageView instance.		private function addChildren():void{			m_canvas = new Bitmap();			this.addChild(m_canvas);		}				//------------------------------------		// Responding to User Interaction		//------------------------------------				//------------------------------------		// Setting and Getting Attributes.		//------------------------------------				/**		 * 		 */		public function set highlighted(value:Boolean):void{			m_highlighted = value;		}		//		public function get highlighted():Boolean{			return m_highlighted;		}				/**		 * A <code>Boolean</code> value that determine whether user interaction is ignored.		 * 		 * @default <code>false</code>		 */		public function set interactive(value:Boolean):void{			if(value != m_interactive){				this.mouseEnabled = m_interactive = value;			}		}		// indicates if user interaction is ignored.		public function get interactive():Boolean{			return m_interactive;		}				/**		 * A <code>Boolean</code> value that determine whether smoothing is applied on the render.		 * 		 * @default <code>false</code>		 */		public function set smoothing(value:Boolean):void{			m_smoothing = value;		}		//		public function get smoothing():Boolean{			return m_smoothing;		}				//------------------------------------		// Single Image management.		//------------------------------------				/**		 * 		 */		public function set image(value:BitmapData):void{			m_image = value;			if(m_highlighted)return;			m_canvas.bitmapData = value;			this.setNeedsLayout();		}		// returns the current image.		public function get image():BitmapData{			return m_image;		}				/**		 * 		 */		public function set highlightedImage(value:BitmapData):void{			m_highlightedImage = value;			if(!m_highlighted)return;			m_canvas.bitmapData = value;			this.setNeedsLayout();		}		//		public function get highlightedImage():BitmapData{			return m_highlightedImage		}				//------------------------------------		// Laying out the view properily.		//------------------------------------				/**		 * @inheritDoc		 */		override protected function layout(rect:Rectangle):void{			var source:BitmapData = m_canvas.bitmapData;			if(source){				var ratio:Number = source.width/source.height;				m_canvas.width = rect.width;				m_canvas.height = rect.width*ratio;				if(m_smoothing){					m_canvas.smoothing = true;				}			}		}		//------------------------------------		// Deconstruction		//------------------------------------				/**		 * @inheritDoc		 */		override public function dispose():void{			// destoying the super implemenation.			super.dispose();		}	}}
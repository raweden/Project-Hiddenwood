////	UISlider.as//	Core UI Framework////	Created by Jesper Svensson on 2011-07//	Copyright 2011 Jesper Svensson. All rights reserved.//package se.raweden.ui.view{	import caurina.transitions.Tweener;		import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;			/**	 * A <code>UISlider</code> component is a visual control used to select a single inbetween a range of values.	 * Sliders are always displyad as horizontal bars. 	 * 	 * @author Raweden	 */	public class UISlider extends UIControl{				//		// TODO: add means for customization in the skin.		//				public static const DIRECTION_VERTICAL:String = "vertical";		public static const DIRECTION_HORIZONTAL:String = "horizontal";		private var m_value:Number;		private var m_continuous:Boolean;		private var m_direction:String = UISlider.DIRECTION_HORIZONTAL;		// hit reference for the smooth draging.		private var hitX:int;		private var hitY:int;				private var _track:Sprite;		private var _thumb:Sprite;				/**		 * 		 */		public function UISlider(parent:DisplayObjectContainer = null,frame:Rectangle = null){			super(parent,frame);			// initilizes this instance.			addChildren();			init();		}				// adding DisplayObject and sub-component to this component instance.		private function addChildren():void{			// creating the track.			_track = new Sprite();			_track.y = 5;			_track.addEventListener(MouseEvent.CLICK,onTrackClick);			this.addChild(_track);			// creating the thumb.			_thumb = new Sprite();			_thumb.x = 50;			_thumb.addEventListener(MouseEvent.MOUSE_DOWN,dragStart);			this.addChild(_thumb);		}		// initilizes this component instance.		private function init():void{			resize(100,16);		}				//------------------------------------		// Responding to User Interaction		//------------------------------------				// triggerd when the track is clicked (this scrubs the thumb to the positon clicked).		private function onTrackClick(e:MouseEvent):void{			var x:int = _track.mouseX;			var procent:Number = x/_track.width;			this.setValue(procent,true);		}				// triggerd when the user presses down the handle.		private function dragStart(e:MouseEvent):void{			hitX = _thumb.mouseX;			hitY = _thumb.mouseY;			stage.addEventListener(MouseEvent.MOUSE_MOVE,dragMove);			stage.addEventListener(MouseEvent.MOUSE_UP,dragStop);		}				// triggerd when the mouse moves over the stage after the handle have been pressed down.		private function dragMove(e:MouseEvent):void{			var max:int = _track.width-_thumb.width;			var min:int = 0;			var v:int;			v = mouseX-hitX;			v = v < min ? min : v;			v = v > max ? max : v;			_thumb.x = v;			var procent:Number = v/max;			// dispatches the change event if the behavior is set.			if(continuous && procent != m_value){				this.dispatchEvent(new Event(Event.CHANGE));			}			m_value = procent;			e.updateAfterEvent();		}				// triggerd when the mouse relases over the stage after the handle have been pressed down.		private function dragStop(e:MouseEvent):void{			stage.removeEventListener(MouseEvent.MOUSE_MOVE,dragMove);			stage.removeEventListener(MouseEvent.MOUSE_UP,dragStop);			if(!continuous){				this.dispatchEvent(new Event(Event.CHANGE));			}		}		//------------------------------------		// Accessing the Slider’s Value		//------------------------------------				/**		 * A Number representing the value manipulated by the slider. 		 * The value ranges from 0.0 to 1.0		 * 		 * @default <code>0.0</code>		 */		public function set value(value:Number):void{			// corrects the value so it can't go out of the range.			value = value > 1 ? 1 : value;			value = value < 0 ? 0 : value;			m_value = value;					}		// returns if the Switch is currently selected.		public function get value():Number{			return(m_value);		}						/**		 * 		 */		public function setValue(value:Number,animated:Boolean = true):void{			value = value > 1 ? 1 : value;			value = value < 0 ? 0 : value;			var x:int = (_track.width-_thumb.width)*value;			if(animated && stage){				var param:Object = {x:x,time:0.3};				if(continuous){					param.onUpdate = onUpdate;				}				param.onComplete = onComplete;				Tweener.addTween(_thumb,param);			}else{				_thumb.x = x;				m_value = value;				this.dispatchEvent(new Event(Event.CHANGE));			}		}				//------------------------------------		// Private Method Responding to Animation Changes.		//------------------------------------				private function onUpdate():void{			m_value = _thumb.x/(_track.width-_thumb.width);			this.dispatchEvent(new Event(Event.CHANGE));		}				private function onComplete():void{			m_value = _thumb.x/(_track.width-_thumb.width);					}				//------------------------------------		// Modifying the Slider’s Behavior		//------------------------------------				/**		 * 		 * @default <code>false</code>		 */		public function set continuous(value:Boolean):void{			m_continuous = value;		}		//		public function get continuous():Boolean{			return m_continuous;		}				/**		 * Not implmented yet.		 * 		 * @default <code>UISlider.DIRECTION_HORIZONTAL</code>		 */		public function set direction(value:String):void{			if(value != m_direction){				m_direction = value;				if(value == DIRECTION_VERTICAL){					resize(this.height,this.width);					m_direction = value;					this.setNeedsDisplay();				}else if(value == DIRECTION_HORIZONTAL){					resize(this.height,this.width);					m_direction = value;					this.setNeedsDisplay();				}			}		}		// indicates the current direction		public function get direction():String{			return m_direction;		}				//------------------------------------		// Updating Content Displayed.		//------------------------------------						/**		 * @private;		 */		override protected function draw(rect:Rectangle):void{			// drawing the track.			_track.graphics.clear();			_track.graphics.beginFill(0xCCCCCC);			_track.graphics.drawRoundRect(0,0,rect.width,6,6,6);			_track.graphics.endFill();			// drawing the thumb.			_thumb.graphics.clear();			_thumb.graphics.beginFill(0xEDEDED);			_thumb.graphics.drawEllipse(0,0,rect.height,rect.height);			_thumb.graphics.endFill();		}					//------------------------------------		// Deconstruction		//------------------------------------				/**		 * @private;		 */		override public function destroy():void{			// removing eventlistners.			_track.removeEventListener(MouseEvent.CLICK,onTrackClick);			_thumb.removeEventListener(MouseEvent.MOUSE_DOWN,dragStart);			// destoying the super implemenation.			super.destroy();		}			}}
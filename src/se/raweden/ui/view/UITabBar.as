package se.raweden.ui.view{	import flash.display.BitmapData;	import flash.display.DisplayObjectContainer;	import flash.geom.Rectangle;		import se.raweden.ui.vo.UITabBarItem;		/**	 * A <code>UITabBar</code> component manages a view stack.	 * 	 * <p>Copyright 2011 Raweden. All rights reserved.</p>	 * 	 * @author Raweden	 */	public class UITabBar extends UIView{				[Embed(source="../../../../../res/tab-bar.png")]		private static var BAR:Class;				private static var SPACING:Number = 10;				private var _items:Array = null;		private var _selectedItem:UITabBarItem;		private var _buttons:Array = null;				public function UITabBar(parent:DisplayObjectContainer = null){			super(parent);			resize(480,32);		}		// Setting and Getting Attributes.				public function set items(value:Array):void{			_items = [];			_buttons = [];			var item:UITabBarItem;			var button:UITabButton			for(var i:int = 0;i<value.length;i++){				item = value[i];				if(item){					button = new UITabButton();					//button.label = item.title;					this.addChild(button);					// pushing reference.					_items.push(item);					_buttons.push(button);				}			}			this.needsLayout();		}		// returns the value of the items attribute.		public function get items():Array{			return _items ? _items.concat() : null;		}				/**		 * 		 */		public function set selectedItem(value:UITabBarItem):void{			var index:int = _items.indexOf(value);			var button:UITabButton;			trace("selecting tab at "+index);			if(index != -1){				if(_selectedItem){					// Remove selection here.				}				button = _buttons[index];				button.selected = true;				trace(button.selected);				_selectedItem = value;			}		}		// returns the value of the selectedItem attribute.		public function get selectedItem():UITabBarItem{			return _selectedItem;		}				//------------------------------------		// Updating Content Displayed.		//------------------------------------				/**		 * @inheritDoc		 */		override protected function draw(rect:Rectangle):void{			var bar:BitmapData = new BAR().bitmapData;			this.graphics.clear();			this.graphics.beginBitmapFill(bar);			this.graphics.drawRect(0,0,rect.width,rect.height);			this.graphics.endFill();		}				/**		 * @inheritDoc		 */		override protected function layout(rect:Rectangle):void{			var button:UIButton;			var len:int = _buttons.length;			var width:Number = Math.round((rect.width-SPACING)/len)-SPACING;			var x:int = SPACING;			var y:int = Math.round((rect.height-_buttons[0].height)*0.5)			for(var i:int = 0;i<_buttons.length;i++){				button = _buttons[i];				button.y = y;				button.x = x;				button.width = width;				x += width+SPACING;			}		}				//------------------------------------		// Deconstruction		//------------------------------------				/**		 * @inheritDoc		 */		override public function dispose():void{			// destoying the super implemenation.			super.dispose();		}			}}import flash.display.BitmapData;import se.raweden.ui.UIImage;import se.raweden.ui.view.UIButton;import se.raweden.ui.view.UIControlState;class UITabButton extends UIButton{		[Embed(source="../../../../../res/tab-bar-item.png")]	private static var BACKGROUND:Class;	private static var background:UIImage;			public function UITabButton(){		make();		this.setBackground(UITabButton.background,UIControlState.Selected);		this.height = 32;	}		private function make():void{		if(UITabButton.background)return;				var image:BitmapData = new BACKGROUND().bitmapData;		UITabButton.background = new UIImage(image.width,image.height);		UITabButton.background.draw(image);		UITabButton.background.stretchable(8,-1);	}	}
package se.raweden.ui.view{	import flash.display.BitmapData;	import flash.display.DisplayObjectContainer;	import flash.geom.Rectangle;		import se.raweden.ui.UIImage;
		/**	 * A <code>UIRating</code> component manages a array of stars which represents the rating of an item.	 * 	 * <p>Copyright 2011 Raweden. All rights reserved.</p>	 * 	 * @author Raweden	 */	public class UIRatingPicker extends UIControl{				// embeded resources		[Embed(source="../../../../../res/star(highlighted).png")]		private static var STAR_HIGHLIGHTED:Class;		private static var highlightedStar:UIImage;				[Embed(source="../../../../../res/star(normal).png")]		private static var STAR:Class;				private static var normalStar:UIImage;				//		// TODO: add methods for setting the states images.		// TODO: add abstract rating value, so the value wont change if number of stars is changed.		//				{			init();		}				private static function init():void{			var highlighted:BitmapData = new STAR_HIGHLIGHTED().bitmapData;			highlightedStar = new UIImage(highlighted.width,highlighted.height);			highlightedStar.draw(highlighted);						var star:BitmapData = new STAR().bitmapData;			normalStar = new UIImage(star.width,star.height);			normalStar.draw(star);		}				//------------------------------------		// Instance Implmentation.		//------------------------------------				private var _buttons:Array;		private var _rating:int = -1;		private var _numberOfStars:int;								public function UIRatingPicker(parent:DisplayObjectContainer = null,numberOfStars:int = 5){			super(parent);			// setting the number of stars.			_numberOfStars = numberOfStars;			// initilizes the rating control.			addChildren();			init();		}				/**		 * Creates and adds related view instances.		 */		private function addChildren():void{			_buttons = new Array();			var button:UIButton			for(var i:int = 0;i<_numberOfStars;i++){				button = new UIButton(this,onStarTouch);				button.resize(32,32);				button.toggle = true;				// setting background images.				button.setBackground(normalStar,UIControlState.Normal);				button.setBackground(highlightedStar,UIControlState.Highlighted);				button.needsDraw();				_buttons.push(button);			}			this.needsLayout();		}				/**		 * Instance Initilization.		 */		private function init():void{			// setting default size.			resize(240,32);		}				//------------------------------------		// Responding to User Interaction.		//------------------------------------				/**		 * Triggerd as a callback when a star button is clicked.		 */		private function onStarTouch(button:UIButton):void{			var index:int = _buttons.indexOf(button);			if(index != -1 && index != _rating){				enableTo(index);			}		}				/**		 * Untility metod for enable a certain number of stars.		 */		private function enableTo(index:int):void{			var len:int = _buttons.length;			var btn:UIButton;			for(var i:int = 0;i<len;i++){				btn = _buttons[i] as UIButton;				btn.highlighted = i <= index ? true : false;			}			_rating = index;		}				//------------------------------------		// Configurating the Ratings Control		//------------------------------------						/**		 * 		 */				public function set rating(value:int):void{			if(value != _rating){				_rating = value;				enableTo(value);			}		}		// returns the value of the rating attribute.		public function get rating():int{			return _rating;		}				/**		 * 		 */		public function get numberOfStars():int{			return _numberOfStars;		}				//------------------------------------		// Updating Content Displayed.		//------------------------------------				/**		 * @inheritDoc		 */		override protected function layout(rect:Rectangle):void{			var len:int = _numberOfStars;			var width:int = _buttons[0].width;			var padding:int = (rect.width-(width*len))*0.5;			for(var i:int = 0;i<len;i++){				_buttons[i].x = padding+(i*width);			}		}				//------------------------------------		// Deconstruction		//------------------------------------				/**		 * @inheritDoc		 */		override public function dispose():void{			// destoying the super implemenation.			super.dispose();		}					}}
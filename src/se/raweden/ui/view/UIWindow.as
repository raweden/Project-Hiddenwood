////	UIWindow.as//	Core UI Framework////	Created by Jesper Svensson on 2011-08-05//	Copyright 2011 Raweden. Some rights reserved.//package se.raweden.ui.view{	import flash.display.DisplayObject;	import flash.display.InteractiveObject;	import flash.events.FocusEvent;		import se.raweden.core.core;	import se.raweden.ui.UIApplication;	import se.raweden.ui.UIViewController;		/**	 * A <code>UIWindow</code> object represents the front-end view of each Application.	 * 	 * @author Raweden.	 */	public class UIWindow extends UIView{				use namespace core;				//		// TODO: implement stage like behavior to this class, so the window class manages focus.		// TODO: implement the window as the "first responder" when active (key) so that the controllers can listent to events on the window instance instead of the stage(removing bad habits).		// TODO: provide a way to manage peer windows.		// TODO: automaticly resize the window instances to stage when active (less boilerplate code).		//				private var m_rootViewController:UIViewController;		private var m_focus:InteractiveObject;				/**		 * Constuctor		 * 		 * @param rootViewController The UIViewController instance that will be asigned 		 * as root controller for this window. 		 */		public function UIWindow(rootViewController:UIViewController){			super();			m_rootViewController = rootViewController;			init();		}				private function init():void{			this.addEventListener(FocusEvent.FOCUS_IN,onFocusEvent);		}				//------------------------------------		// Configuring the Window View.		//------------------------------------				/**		 * 		 */		public function set rootViewController(value:UIViewController):void{			m_rootViewController = value;			// clear the view hieraki here.		}				public function get rootViewController():UIViewController{			return m_rootViewController;		}				//------------------------------------		// Focus Management.		//------------------------------------				/**		 * 		 */		public function set focus(value:InteractiveObject):void{			m_focus = value;		}		//		public function get focus():InteractiveObject{			return m_focus;		}				// responds to the focus change.		private function onFocusEvent(e:FocusEvent):void{			if(e.type == FocusEvent.FOCUS_IN){				m_focus = e.target as InteractiveObject;			}		}				//------------------------------------		// Responder Chain Overrides.		//------------------------------------				//------------------------------------		// Making Window Key.		//------------------------------------				public function get keyWindow():Boolean{			return UIApplication.sharedApplication.keyWindow == this;		}				public function makeKeyWindow():void{					}				public function becomeKeyWindow():void{					}				public function resignKeyWindow():void{					}				//------------------------------------		// Deconstruction		//------------------------------------				/**		 * @private;		 */		override public function destroy():void{					}					}}
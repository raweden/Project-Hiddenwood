package se.raweden.ui.view{		import flash.geom.Rectangle;	import flash.utils.getQualifiedClassName;		/**	 * A <code>UITableViewCell</code>	 *	 * Copyright 2011, Raweden. All Rights Reserved.	 *	 * @author Raweden	 */	public class UITableViewCell extends UIView{				private var _identifier:String		// cell state.		private var _selected:Boolean;		private var _highlighted:Boolean;		private var _editing:Boolean;		// composite views.		protected var _labelView:UILabel;		protected var _detailLabel:UILabel;		protected var _imageView:UIImageView;				/**		 * Constructor.		 * 		 * @param identifier		 */		public function UITableViewCell(identifier:String){			super();			_identifier = identifier ? identifier : getQualifiedClassName(this);			this.doubleClickEnabled = true;		}						//------------------------------------		// Reusing Cell view.		//------------------------------------				/**		 * Indicates the reuse identifier for the cell, this		 * value can only be specified in the constructor.		 */		public function get identifier():String{			return _identifier;		}				/**		 * 		 */		public function prepareForReuse():void{			if(_labelView){				_labelView.text = "";			}			if(_detailLabel){				_detailLabel.text = "";			}			if(_imageView){				_imageView.image = null;			}			this.selected = false;		}				//------------------------------------		// Getting Related Views.		//------------------------------------				/**		 * 		 */		public function get textLabel():UILabel{			if(!_labelView){				_labelView = new UILabel(this);				_labelView.size = 14;				_labelView.x = 20;				_labelView.doubleClickEnabled = true;				needs("layout",layout);			}			return _labelView;		}				/**		 * 		 */		public function get detailTextLabel():UILabel{			if(!_detailLabel){				_detailLabel = new UILabel(this);				_detailLabel.height = 16;				_detailLabel.textColor = 0x424242;				_detailLabel.size = 12;				_detailLabel.doubleClickEnabled = true;				needs("layout",layout);			}			return _detailLabel;		}				/**		 * 		 */		public function get imageView():UIImageView{			if(!_imageView){				_imageView = new UIImageView();				this.addChildAt(_imageView,0);				_imageView.resize(42,42);				_imageView.doubleClickEnabled = true;			}			return _imageView;		}				//------------------------------------		// Managing Cell State		//------------------------------------				/**		 * A <code>Boolean</code> value indicating if the Cell is selected.		 */		public function set selected(value:Boolean):void{			_selected = value;			needs("draw",draw);		}		// indicates if the cell is currently selected.		public function get selected():Boolean{			return _selected;		}		/**		 * A <code>Boolean</code> value indicating if the Cell is highlighted.		 */		public function set highlighted(value:Boolean):void{			_highlighted = value;			needs("draw",draw);		}		// indicates if the cell is currently highlighted.		public function get highlighted():Boolean{			return _highlighted;		}				/**		 * A <code>Boolean</code> value indicating if the Cell is currently beeing edited.		 */		public function set editing(value:Boolean):void{			_editing = value;		}		// indicates if the currently in edit mode.		public function get editing():Boolean{			return _editing;		}				//------------------------------------		// Updating Content Displayed.		//------------------------------------				/**		 * @inheritDoc		 */		override protected function layout(rect:Rectangle):void{			var baseX:int = 20;			if(_imageView){				_imageView.x = 10;				_imageView.resize(rect.height-8,rect.height-8);				_imageView.y = (rect.height-_imageView.height)*0.5;				baseX = 20+rect.height;			}			if(this._labelView && this._detailLabel){				_labelView.x = _detailLabel.x  = baseX;				_labelView.y = rect.height-_labelView.height-_detailLabel.height-10;				_detailLabel.y = rect.height-_detailLabel.height-5;				_labelView.width = rect.width - baseX - 20;				_detailLabel.width = _labelView.width;				//			}else if(this._labelView){				_labelView.x = baseX;				_labelView.y = (rect.height-_labelView.height)*0.5;				_labelView.width = rect.width - baseX - 20;			}		}				/**		 * @inheritDoc		 */		override protected function draw(rect:Rectangle):void{			this.graphics.clear();			if(_selected){				this.graphics.beginFill(0x25b9e4);				}else{				this.graphics.beginFill(0xFFFFFF);				}			this.graphics.drawRect(0,0,rect.width,rect.height);			this.graphics.beginFill(0xFFFFFF,0.20);			this.graphics.drawRect(0,0,rect.width,1);			this.graphics.beginFill(0x000000,0.20);			this.graphics.drawRect(0,rect.height-1,rect.width,1);			this.graphics.endFill();		}				//------------------------------------		// Deconstruction		//------------------------------------				/**		 * @inheritDoc		 */		override public function dispose():void{			// destoying the super implemenation.			super.dispose();		}			}}
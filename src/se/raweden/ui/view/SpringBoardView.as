package se.raweden.ui.view{		import flash.display.BitmapData;	import flash.display.DisplayObjectContainer;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.geom.Rectangle;		import se.raweden.motion.Tween;	import se.raweden.ui.events.UITableEvent;
		/**	 * A <code>SpringBoardView</code>	 * Description	 *	 * <p>Copyright 2011, Raweden. All Rights Reserved.</p>	 *	 * @author Raweden	 */	public class SpringBoardView extends UIView{				private var _dataSource:ISpringBoardDataSource;		private var _currentPage:int = -1;		private var _numberOfPages:int = 0;		private var _isEditing:Boolean = false;				// Related Cells.		private var _visibleCells:Array;		private var _reuseableCells:Array;		private var _target:SpringBoardViewCell;				// Related views.		private var _directoryView:DirectoryView;		private var _pageContol:UIPageControl;		private var _content:Sprite;		private var _container:Sprite;		private var _background:Sprite;		private var _model:Sprite = new Sprite();				public var dismiss:Function				/**		 * 		 * @param	parent		 */		public function SpringBoardView(parent:DisplayObjectContainer = null){			super(parent);			addChildren();			init();			// Resizes the view to it's default size.			resize(640,360);		}				//		private function addChildren():void{						// adding main container.			_container = new Sprite();			this.addChild(_container);						// adding backgrund container.			_background = new Sprite();			_container.addChild(_background);						// adding content Container.			_content = new Sprite();			_container.addChild(_content);						// adding page indicator.			_pageContol = new UIPageControl(_background);			_pageContol.currentPage = 4;			_pageContol.numPages = 10;		}				//		private function init():void{			_visibleCells = new Array();			_reuseableCells = new Array();			_model.addEventListener(MouseEvent.CLICK,onModalClick);			_background.addEventListener(MouseEvent.CLICK,onBackgroundClick);		}				//------------------------------------		// Getting and Setting Delegate.		//------------------------------------				/**		 * 		 */		public function set dataSource(value:ISpringBoardDataSource):void{			_dataSource = value;			if(_directoryView)				_directoryView.dataSource = value;						}		// returns the current dataSource.		public function get dataSource():ISpringBoardDataSource{			return _dataSource;		}				//------------------------------------		// Managing Spring Board Cells.		//------------------------------------				/**		 * 		 */		public function reuseableCell(identifier:String):SpringBoardViewCell{			var len:int = _reuseableCells.length;			var cell:SpringBoardViewCell			for(var i:int = 0;i<len;i++){				cell = _reuseableCells[i];				if(cell.identifier == identifier){					_reuseableCells.splice(i,1);					return cell;				}			}			return null;		}				/**		 * 		 */		private function prepareForReuse(cell:SpringBoardViewCell):void{					}				/**		 * 		 */		public function indexForCell(cell:SpringBoardViewCell):int{			return _visibleCells.indexOf(cell);		}				/**		 * 		 */		public function cellForIndex(index:int):SpringBoardViewCell{			if(index > 0 && index < _visibleCells.length){				return _visibleCells[index];			}			return null;		}				/**		 * 		 */		public function get visibleCells():Array{			var cells:Array = new Array();			var cell:SpringBoardViewCell;			var len:int = _visibleCells.length			for(var i:int = 0;i<len;i++){				cell = _visibleCells[i];				if(cell != null){					cells.push(cell);				}			}			return cells.length > 0 ? cells : null;		}				//------------------------------------		// Getting and Setting Attributes.		//------------------------------------				/**		 * 		 */		public function set currentPage(value:int):void{					}		// returns the current page.		public function get currentPage():int{			return _currentPage;		}				/**		 * 		 */		public function get numberOfPages():int{			return _dataSource ? _dataSource.numberOfPages : -1;		}				/**		 * A Boolean value determine whether the Springboard is currently beeing edited by the User.		 */		public final function get isEditing():Boolean{			return _isEditing;		}				/**		 * A intreger value that determine the index of the currently selected cell.		 */		public final function get selectedIndex():int{			return _target ? _visibleCells.indexOf(_target) : -1;		}				//------------------------------------		//		//------------------------------------				/**		 * 		 * @param index The index to be reloaded or <code>-1</code> to reload the whole springboard.		 */		public function reload(index:int = -1):void{			if(index != -1){				return reloadIndex(index);			}			//			var len:int = _dataSource.numCellsAt(0);			var cell:SpringBoardViewCell;			var w:Number = 160;			var h:Number = 140;			var cells:int = Math.floor(width/w);			var tx:Number = (width-(cells*w))*0.5;			var rs:int = Math.floor(height/h);			var ty:Number = (height-(rs*h))*0.5;			var y:Number = 0;			var x:Number = 0;						trace("current width:",width);			trace("cells per row:",cells);						for(var i:int = 0;i<len;i++){				cell = _dataSource.cellAt(this,0,i);				cell.x = tx+x;				cell.y = ty+y;				cell.width = w;				cell.addEventListener(MouseEvent.CLICK,onClick);				_visibleCells[i] = cell;				_content.addChild(cell);				x += w;				trace("switch row ?",(i+1)%cells == 0);				// Determine whether the next cell sould be placed on the next row.				if((i+1)%cells == 0 && i != 0){					y += h;					x = 0;				}			}				}				private function reloadIndex(index:int):void{			trace("reloading index at");			}				//------------------------------------		// Updating Content Displayed.		//------------------------------------						/**		 * @inheritDoc		 */		override protected function draw(rect:Rectangle):void{			if(this.contains(_model)){				_model.graphics.clear();				_model.graphics.beginFill(0xFFFFFF,0.001);				_model.graphics.drawRect(0,0,rect.width,rect.height);				_model.graphics.endFill();			}			// draws transparent background to define a constant buffer size.			_background.graphics.clear();			if(m_backgroundBuffer){				_background.graphics.beginBitmapFill(m_backgroundBuffer);			}else{				_background.graphics.beginFill(0xFFFFFF,0.001);			}			_background.graphics.drawRect(0,0,rect.width,rect.height);			_background.graphics.endFill();			// draws a red cross to determine where the image is split.			/*			_content.graphics.lineStyle(2,0xFF0000);			_content.graphics.moveTo(10,10);			_content.graphics.lineTo(rect.width-10,rect.height-10);			_content.graphics.endFill();			_content.graphics.lineStyle(2,0xFF0000);			_content.graphics.moveTo(rect.width-10,10);			_content.graphics.lineTo(10,rect.height-10);			_content.graphics.endFill();			*/		}				/**		 * @inheritDoc		 */		override protected function layout(rect:Rectangle):void{			// Laying out the page indicator.			_pageContol.x = Math.round((rect.width-_pageContol.width)*0.5);			_pageContol.y = Math.round(rect.height-_pageContol.height-10);			// Laying out the directoryView			if(_directoryView){				_directoryView.width = rect.width;			}		}				private var m_backgroundBuffer:BitmapData;				public function set backgroundBuffer(value:BitmapData):void{			m_backgroundBuffer = value;			needsDraw();		}				public function get backgroundBuffer():BitmapData{			return m_backgroundBuffer;		}				//------------------------------------		// Getting Related Views.		//------------------------------------				/**		 * 		 */		public function get directoryView():DirectoryView{			// creating directory if not already exist.			if(!_directoryView){				_directoryView = new DirectoryView(this);				_directoryView.width = width;			}				return _directoryView;		}				//------------------------------------		// Responding to User Interaction.		//------------------------------------		/**		 * This method internaly handles the event of the user clicking on a cell.		 */		private function onClick(e:MouseEvent):void{			var target:SpringBoardViewCell = e.currentTarget as SpringBoardViewCell;			var index:int = indexForCell(target);			if(_target == target){				return;			}			if(_dataSource.hasChildren(index) == true){							}else{				this.dispatchEvent(new UITableEvent(UITableEvent.ITEM_CLICK,index));				return;			}								if(_target){				this.dismissDirectory();			}else{				this.presentDirectory(target);			}		}						// Move this code bellow, to the DirectoryView class.						/**		 * Presents the directory view.		 * 		 */		private function presentDirectory(target:SpringBoardViewCell):void{						// Carculating the offset of the directory view.			var offset:Point = directoryView.offset;			offset.x =  target.x+(target.width*0.5);			offset.y = target.y+target.height+20;			directoryView.y = offset.y;			directoryView.offset = offset;						// Starting animation to fade the other cells out.			var len:int = _visibleCells.length;			var cell:SpringBoardViewCell;			for(var i:int = 0;i<len;i++){				cell = _visibleCells[i];				if(cell && cell != target){					Tween.to(cell,0.75,{alpha:0.25}).start();				}			}						// Adding container to capture mouse clicks outside directory view.			_content.addChild(_model);			_content.setChildIndex(target,this.numChildren-1);						// Adding directory view.			this.addChild(directoryView);			this.needsDraw();			_target = target;			this.directoryView.shader.ty = offset.y;			this.directoryView.shader.height = 0;						// Starting the animation for opening the directory view.			Tween.to(directoryView,0.6,{height:140,progress:1},{height:140,progress:1}).start();			_content.filters = [directoryView.shader];					}				// Applies the filter when animating.		private function applyFilter():void{			_content.filters = [directoryView.shader];		}				/**		 * Dismisses the Directory view.		 */		private function dismissDirectory():void{			Tween.to(directoryView,0.3,{height:0,progress:0},{onUpdate:applyFilter,onComplete:onAnimationComplete});			//			for(var i:int = 0;i<this._visibleCells.length;i++){				var cell:SpringBoardViewCell = _visibleCells[i];				if(cell && cell != _target){					Tween.to(cell,0.6,{alpha:1});					//Tweener.addTween(cell,{alpha:1,time:0.6});				}			}		}				// triggerd when the animation (fade out) is complete.		private function onAnimationComplete():void{			if(this.contains(_directoryView) && this.contains(_model)){				this.removeChild(_directoryView);				_content.removeChild(_model);			}else{				return;			}						_target = null;			_content.filters = null;		}				// triggerd when the modal mouse capture is clicked.		private function onModalClick(e:MouseEvent):void{			if(_directoryView.parent == this){				this.dismissDirectory();			}else if(dismiss != null){				dismiss();			}		}				private function onBackgroundClick(e:Event):void{			if(dismiss != null){				dismiss();			}		}			}}import flash.display.Shader;import flash.display.Sprite;import flash.filters.DropShadowFilter;import flash.filters.ShaderFilter;import flash.geom.Point;import flash.geom.Rectangle;import se.raweden.ui.view.ISpringBoardDataSource;import se.raweden.ui.view.SpringBoardView;import se.raweden.ui.view.UIView;
/** * A DirectoryView is the component that displayes the content in a folder of the springboard. *  * @author Raweden */class DirectoryView extends UIView{		private var _dataSource:ISpringBoardDataSource;	private var _content:Sprite;	private var _springBoard:SpringBoardView;	private var _offset:Point = new Point();	private var _filter:PixelGapFilter;		public function DirectoryView(parent:SpringBoardView){		super();		_springBoard = parent;		addChildren();		init();		resize(640,0);	}		private function addChildren():void{		_content = new Sprite();		this.addChild(_content);	}	private function init():void{		this.filters = [new DropShadowFilter(2,90,0x000000,0.75,8,8,1,2,true)];	}		//------------------------------------	// Getting and Setting Attributes.	//------------------------------------		/**	 * 	 */	public function set dataSource(value:ISpringBoardDataSource):void{		_dataSource = value;	}		public function get dataSource():ISpringBoardDataSource{		return _dataSource;	}		/**	 * 	 */	public function set offset(value:Point):void{		_offset = value;		this.needsDraw();	}		public function get offset():Point{		return _offset;	}		private var m_progress:Number = 0;		/**	 * 	 */	public function set progress(value:Number):void{		m_progress = value;		this.needsDraw();	}		public function get progress():Number{		return m_progress;	}		public function show(index:int):void{			}		public function hide():void{			}		//------------------------------------	// Laying Out View.	//------------------------------------		/**	 * @inheritDoc	 */	override protected function draw(rect:Rectangle):void{		var x:int = _offset.x;		// drawing the background.		this.graphics.beginFill(0x323232);		this.graphics.drawRect(0,0,rect.width,rect.height);		// drawing the arrow.		var c:Number = 15*m_progress		this.graphics.moveTo(x-c,0);		this.graphics.lineTo(x,-c);		this.graphics.lineTo(x+c,0);		this.graphics.endFill();	}		public function get shader():PixelGapFilter{		if(!_filter){			_filter = new PixelGapFilter();		}		return _filter;	}		override public function set height(value:Number):void{		value = Math.round(value);		this.shader.height = value;		super.height = value;	}		/**	 * @inheritDoc	 */	override protected function layout(rect:Rectangle):void{		}	}/** * The <code>PixelGapFilter</code> class is a custom filter kernel, that provides an interface  * to animate the gab behind the directory view when displayed.  *  * @author Raweden */class PixelGapFilter extends ShaderFilter{		[Embed(source="../../../../../res/filters/PixelGap.pbj", mimeType="application/octet-stream")]	private static var BYTE_CODE:Class;		private var _shader:Shader;	private var _ty:Number = 0;	private var _height:Number = 0;		public function PixelGapFilter(){		_shader = new Shader(new BYTE_CODE());		super(_shader);	}		/**	 * A Number that determines the y cordinate where the pixel displace will start.	 */	public function set ty(value:Number):void{		shader.data.ty.value = [value];		_ty = value;	}		public function get ty():Number{		return _ty;	}		/**	 * A Number that determines the height of the pixel displace.	 */	public function set height(value:Number):void{		shader.data.height.value = [value];		_height = value;	}		public function get height():Number{		return _height;	}		}
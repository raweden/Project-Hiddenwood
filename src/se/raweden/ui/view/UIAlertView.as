package se.raweden.ui.view{	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.DropShadowFilter;	import flash.geom.Matrix;	import flash.geom.Rectangle;		[Event(name="didPresent", type="se.raweden.ui.events.UIAlertEvent")]	[Event(name="didDismiss", type="se.raweden.ui.events.UIAlertEvent")]	[Event(name="didCancel", type="se.raweden.ui.events.UIAlertEvent")]			/**	 * A <code>UIAlertView</code> component	 * 	 * <p>Copyright 2011 Raweden. All rights reserved.</p>	 * 	 * @author Raweden	 */	public class UIAlertView extends UIView{				private static const DEFAULT_SHADOW:DropShadowFilter = new DropShadowFilter(10,90,0x000000,0.45,20,20,1,3);				//		// TODO: use UIApplication to make the alert container window visible to the user.		// TODO: add alternative draw theme.		//				private static var _modalWindow:UIWindow;		// attributes.		private var _delegate:Object;		private var _title:String;		private var _message:String;		private var _buttons:Array = [];		// renders.		private var _labelView:UILabel;		private var _messageView:UILabel;				/**		 * Constructor.		 */		public function UIAlertView(){			super();			addChildren();			init();			// Setting the default size.			this.resize(240,140);		}				/**		 * Creates and adds related views to this alert view instance.		 */		private function addChildren():void{						// Adding the label text view.			_labelView = new UILabel(this);			_labelView.y = 5;			_labelView.x = 10;			_labelView.textColor = 0xFFFFFF;			_labelView.size = 18;			_labelView.align = "center";						// Adding the message text view.			_messageView = new UILabel(this);			_messageView.textColor = 0xCCCCCC;			_messageView.align = "left";			_messageView.size = 13;			_messageView.x = 10;			_messageView.y = 30;						// adds default button.			addButton("Dismiss",null);		}				/**		 * Initlizes the alert view instance.		 */		private function init():void{			this.filters = [DEFAULT_SHADOW];			this.addEventListener(Event.RESIZE,onResize);		}				//------------------------------------		// Getting And Setting Attributes.		//------------------------------------				/**		 * 		 */		public function set delegate(value:Object):void{			_delegate = value;		}		// returns the current delegate.		public function get delegate():Object{			return _delegate;		}				/**		 * 		 */		public function set title(value:String):void{			_title = value;			_labelView.text = value;		}		// returns the title.		public function get title():String{			return _title;		}				/**		 * 		 */		public function set message(value:String):void{			_message = value;			_messageView.text = value;		}		// returns the message.		public function get message():String{			return _message;		}				//------------------------------------		// Configuring Buttons		//------------------------------------				/**		 * Adds a button to this alert view.		 * 		 * @param title		 * @param callback		 */		public function addButton(title:String,callback:Function):void{			var button:UIButton = new UIButton(this,callback);			button.title = title;			button.addEventListener(MouseEvent.CLICK,onButtonClick);			_buttons.unshift(button);			this.needsLayout();		}				/**		 * Determines the number of buttons in this alert view.		 */		public function get numberOfButtons():int{			return 	_buttons.length;		}				/**		 * Determines the title at the specified index,		 * 		 * @param index		 * @return		 */		public function buttonTitleAt(index:int):String{			if(index > 0 && index < _buttons.length){				return 	_buttons[index].label;			}			return null;		}				/**		 * Determines the index of the cancel button.		 */		public function get cancelButtonIndex():int{			return 0;		}				//------------------------------------		// Displaying and Dismissing		//------------------------------------				/**		 * Presents the alertview 		 * 		 * @param window		 */		public function show(window:UIWindow):void{			if(!_modalWindow){				_modalWindow = new ModalWindow();			}			if(window && window.parent){				window.parent.addChild(_modalWindow);				_modalWindow.resize(window.stage.stageWidth,window.stage.stageHeight);			}			// Adding Alertview to the window.			_modalWindow.addChild(this);			_modalWindow.addEventListener(Event.RESIZE,onResize);			// Center the alert to middle of the stage.			this.x = Math.round((_modalWindow.width-width)*0.5);			this.y = Math.round((_modalWindow.height-height)*0.5);					}				/**		 * 		 */		public function dismiss(callbackIndex:uint = 0,animated:Boolean = true):void{			animated = this.stage ? animated : false;			_modalWindow.removeEventListener(Event.RESIZE,onResize);						if(_modalWindow.parent){				_modalWindow.parent.removeChild(_modalWindow);			}						if(parent){				parent.removeChild(this);			}		}				private function onResize(e:Event):void{			if(_modalWindow && _modalWindow.contains(this)){					this.x = Math.round((_modalWindow.width-width)*0.5);				this.y = Math.round((_modalWindow.height-height)*0.5);				}		}				private function onButtonClick(e:Event):void{			var target:UIButton = e.currentTarget as UIButton;			var index:int = _buttons.indexOf(target);			if(index != -1){				dismiss(index,true);			}		}		//------------------------------------		// Updating Content Displayed.		//------------------------------------				/**		 * @inheritDoc		 */		override protected function draw(rect:Rectangle):void{			//var matrix:Matrix = new Matrix();			//matrix.createGradientBox(rect.width,rect.height,MathUtil.rad(90));			this.graphics.clear();			this.graphics.lineStyle(2,0xF1F1F1,0.80,true);			this.graphics.beginFill(0x2D2D2D,0.80);			//this.graphics.beginGradientFill("linear",[0x474747,0x2D2D2D],[0.8,0.8],[0,255],matrix);			// Drawing rectangle with round coners.			var radius:int = 30;			this.graphics.drawRoundRect(0,0,rect.width,rect.height,radius,radius);			this.graphics.endFill();		}				/**		 * @inheritDoc		 */		override protected function layout(rect:Rectangle):void{			_labelView.width = rect.width-20;						_messageView.width = rect.width-20;			_messageView.height = rect.height-40;			// Arranging Buttons.			var button:UIButton;			var y:Number = 130;	//Math.round(rect.height-10);			if(_buttons.length == 1){				button = _buttons[0];				button.width = rect.width-20;				button.x = 10;				button.y = y-button.height;			}else if(_buttons.length == 2){				button = _buttons[0];				button.width = Math.round((rect.width-30)*0.5);				button.x = 10;				button.y = y-button.height;				button = _buttons[1];				button.width = Math.round((rect.width-30)*0.5);				button.x = button.width+20;				button.y = y-button.height;			}else if(_buttons.length != 0){				y = y-_buttons[0].height;				for(var i:int = 0;i<_buttons.length;i++){					button = _buttons[i];					button.width = rect.width-20;					button.y = y;					button.x = 10;					y += button.height+10;				}				// Resizes the render rect to draw panel over a larger area.				rect.height = y;				this.needsDraw();			}		}				//------------------------------------		// Deconstruction		//------------------------------------				/**		 * @inheritDoc		 */		override public function dispose():void{			// destoying the super implemenation.			super.dispose();		}			}}import flash.display.GradientType;import flash.geom.Matrix;import flash.geom.Rectangle;import se.raweden.ui.view.UIWindow;class ModalWindow extends UIWindow{		private var matrix:Matrix		public function ModalWindow(){		matrix = new Matrix();		}		override protected function draw(rect:Rectangle):void{		// 		matrix.createGradientBox(rect.width,rect.height);		matrix.scale(2,2);		matrix.tx = rect.width*0.5;		matrix.ty = rect.height*0.5;		// Drawing the modal background to Stage.		this.graphics.clear();		this.graphics.beginGradientFill(GradientType.RADIAL,[0xFFFFFF,0x000000],[0.0,0.75],[0,255],matrix);		this.graphics.drawRect(0,0,rect.width,rect.height);		this.graphics.endFill();	}	}
package se.raweden.ui.view{	import flash.display.BitmapData;	import flash.display.DisplayObjectContainer;	import flash.geom.Rectangle;		import se.raweden.ui.vo.UIBarButtonItem;		/**	 * A <code>UIToolbar</code> component manages a collection of items.	 * 	 * <p>Copyright 2011 Raweden. All rights reserved.</p>	 * 	 * @author Raweden	 */	public class UIToolbar extends UIView{				//		// TODO: improve the implementation for adding the buttons.		// TODO: improve implementation for customizing the view.		//				[Embed(source="../../../../../res/nav-bar.png")]		private static var BAR:Class;						private var _items:Array;		private var _buttons:Array;				public function UIToolbar(parent:DisplayObjectContainer){			super(parent);			resize(480,40);		}				public function set items(value:Array):void{			this.setItems(value, this.stage != null);		}		// returns the value of the items attribute.		public function get items():Array{			return _items;		}				public function setItems(items:Array,animated:Boolean = false):void{			_items = [];			_buttons = [];			var item:UIBarButtonItem;			var button:UIButton;			for(var i:int = 0;i<items.length;i++){				item = items[i];				if(item){					button = new UIButton(this);					if(item.image){						button.setImage(item.image, UIControlState.Normal);						}else{						button.title = item.title;					}					button.callback = item.callback;					// pushing reference.					_items.push(item);					_buttons.push(button);				}			}			this.needsLayout();		}				//------------------------------------		// Updating Content Displayed.		//------------------------------------				/**		 * @inheritDoc		 */		override protected function draw(rect:Rectangle):void{			var bar:BitmapData = new BAR().bitmapData;			this.graphics.clear();			this.graphics.beginBitmapFill(bar);			this.graphics.drawRect(0,0,rect.width,rect.height);			this.graphics.endFill();		}				/**		 * @inheritDoc		 */		override protected function layout(rect:Rectangle):void{			if(!_buttons || _buttons.length == 0)				return;						var button:UIButton;			var len:int = _buttons.length;			var width:Number = Math.round((rect.width-10)/len)-10;			var x:int = 10;			var y:int = Math.round((rect.height-_buttons[0].height)*0.5)			for(var i:int = 0;i<_buttons.length;i++){				button = _buttons[i];				button.y = y;				button.x = x;				button.width = width;				x += width+10;			}		}				//------------------------------------		// Deconstruction		//------------------------------------				/**		 * @inheritDoc		 */		override public function dispose():void{						// destoying the super implemenation.			super.dispose();		}			}}
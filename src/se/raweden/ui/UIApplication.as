package se.raweden.ui{	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.KeyboardEvent;		import se.raweden.core.core;	import se.raweden.ui.view.UIWindow;	public class UIApplication extends EventDispatcher{				use namespace core;				//------------------------------------		// Class Implemenation.		//------------------------------------				private static var m_sharedApplication:UIApplication;				/**		 * Returns the singleton application instance.		 * 		 * <p>The application instance is created automaticly.</p>		 */		public static function get sharedApplication():UIApplication{			if(!m_sharedApplication){				m_sharedApplication = new UIApplication();			}			return m_sharedApplication;		}				//------------------------------------		// Instance Implemenation.		//------------------------------------				private var m_delegate:UIApplicatioController;		private var m_keyWindow:UIWindow;		private var m_windows:Array;				/**		 * Constructor - Never call the constructor your self. use <code>UIApplication.sharedApplication</code> instead.		 */		public function UIApplication(){			m_windows = new Array();			super.addEventListener(Event.ACTIVATE,onActivate);			super.addEventListener(Event.DEACTIVATE,onDeactivate);		}				//------------------------------------		// Responding to Applicaion events		//------------------------------------				private function onActivate(e:Event):void{			if(m_delegate)				m_delegate.onActivate();		}				private function onDeactivate(e:Event):void{			if(m_delegate)				m_delegate.onDeativate();		}				//------------------------------------		// Setting and Getting Deligate.		//------------------------------------				/**		 * The delegate of the application object.		 */		public function set delegate(value:UIApplicatioController):void{			m_delegate = value;		}		// returs the current delegate object.		public function get delegate():UIApplicatioController{			return m_delegate;		}				//------------------------------------		// Getting Application Windows		//------------------------------------				/**		 * The applications key window.		 * 		 * <p>This property holds the <code>UIWindow</code> instance that most 		 * recently invoked the <code>makeKeyWindow()</code> method.</p>		 */		public function get keyWindow():UIWindow{			return m_keyWindow;		}				/**		 * 		 */		public function get windows():Array{			return m_windows;		}				//------------------------------------		// Open Resources.		//------------------------------------				/**		 * Opens the argument resource.		 * 		 * <p>The opening of the resource is handled by the current delegate.</p>		 * 		 * @param arguments		 * @return <code>true</code> if the application successfully handled the arguments; otherwise <code>false</code>.		 */		public function open(arguments:Object):Boolean{			return m_delegate ? m_delegate.open(arguments) : false;		}				//------------------------------------		// Controlling and Handling Events.		//------------------------------------					/**		 * @private		 */		override public function dispatchEvent(event:Event):Boolean{			if(m_keyWindow && event is KeyboardEvent){				return m_keyWindow.dispatchEvent(event);			}			return super.dispatchEvent(event);		} 			}}
package se.raweden.ui{		import flash.display.Shape;	import flash.events.Event;		import se.raweden.ui.view.UINavigationBar;	import se.raweden.ui.view.UIToolbar;	import se.raweden.ui.view.UIView;	/**	 * The <code>UINavigationcontroller</code> class implements a specialized view controller that manages 	 * the navigatioon of hierarchical content. This class is not intended for subclassing.	 * 	 * <p>Because the UINavigationController inherits from the UIViewController class, 	 * navigation controller have their own view that is accessible through the <code>view</code> property.	 * When deploying a navigation interface, you must manualy add this view to the DisplayList. 	 * The view itself is just a container for several other views, including your custom content.</p>	 * 	 * <p>Copyright 2011 Raweden. All rights reserved.</p>	 * 	 * @author Raweden.	 */		public class UINavigationController extends UIViewController{				private var _visibleViewController:UIViewController;		private var _viewControllers:Array;				private var _navigationView:UINaviagtionView;				/**		 * 		 * @param	topViewController		 */		public function UINavigationController(topViewController:UIViewController = null){			super();			// constucting the Controller.			_viewControllers = new Array();			init();			// pushes the root controller from the constructor to be the rootView controller if not null.			if(topViewController && topViewController != this){				view.resize(480,320);				pushViewController(topViewController);			}		}				// setting up the view that the NavigationController is using.		private function init():void{			// adding the view.			view.addEventListener(Event.RENDER,onViewRender);			// adding callback for naviagtion bar.			navigationBar.backButton.callback = this.popViewController;		}				//------------------------------------		// Accessing controller on the Navigation stack.		//------------------------------------				/**		 * Indicates the root ViewController.		 */		public final function get topViewController():UIViewController{			return _viewControllers.length > 0 ? _viewControllers[0] : null;		}				/**		 * Indicates the current visible ViewController.		 */		public final function get visibleViewController():UIViewController{			return _viewControllers.length > 0 ? _viewControllers[_viewControllers.length-1] : null;		}				/**		 * A Array containing all <code>UIViewController</code> in the navigation stack.		 */		public final function get viewControllers():Array{			return _viewControllers.concat();		}				//------------------------------------		// Pushing and Popping Stack Items.		//------------------------------------						/**		 * 		 * @param	controller		 */		public function pushViewController(controller:UIViewController):void{			var index:int = _viewControllers.indexOf(controller);			// makes sure that the controller have not already been added to the hieracy.			trace("push-view-controller:",controller,"exists:",(index != -1));			if(index == -1  && controller != null){				var view:UIView = controller.view;				_navigationView.pushView(view,view.stage == null || _viewControllers.length == 0 ? false : true);				// Setting the title of the naigatioBar.				_visibleViewController = controller;				_viewControllers.push(controller);				title = controller.title;				navigationBar.title = title;				if(_navigationView && _viewControllers.length > 1 && _navigationView.navigationBar.backButton.enabled == false){					_navigationView.navigationBar.backButton.enabled = true;				}			}		}				/**		 * 		 * @return		 */		public function popViewController():UIViewController{			if(_viewControllers.length > 1){				var controller:UIViewController = _viewControllers.pop();				var view:UIView = controller.view;				_navigationView.popToView(view,view.stage != null);				// Setting the title of the naigatioBar.				_visibleViewController = _viewControllers[_viewControllers.length-1];				title = _visibleViewController.title;				navigationBar.title = title;				if(_navigationView && _viewControllers.length == 1){					_navigationView.navigationBar.backButton.enabled = false;				}				return controller;			}				/*				trace("do pop length:",_viewControllers.length);				var animated:Boolean = view.stage != null;				var controller:UIViewController = _viewControllers.pop();				if(animated){					var a:UIView = controller.view;					var b:UIView = this.visibleViewController.view;					resize(b);					b.x = -view.width;					view.addChild(b);					Tweener.addTween(a,{time:0.7,x:view.width});					Tweener.addTween(b,{time:0.7,x:0});									}// we dont use tweener here.				else{					// implementation missing!				}					navigationBar.pop(animated);				return controller;			}			trace("skipped pop length:",_viewControllers.length);				*/			return null;		}				/**		 * Pops all the view controllers on the stack except the root view controller and updates the display.		 * 		 * <p>set animated to <code>true</code> to animate the transition. 		 * Pass <code>false</code> if you are setting up a navigation controller before its view is displayed.</p>		 * 		 * @return An Array of view controllers that are poped from the stack.		 */		public function popToRootViewController():Array{			return popToViewController(topViewController);		}		/**		 * Pops the controllers that are bellow the <code>controller</code> in the stack.		 * 		 * @param	controller		 * @return An Array of view controllers that are poped from the stack.		 */		public function popToViewController(controller:UIViewController):Array{			// the controller instance passed may not be null.			if(!controller)				new Error("controller may not be null");									var index:int = _viewControllers.indexOf(controller);			if(controller != _visibleViewController && index != -1){	// makes sure that the controller do exists in the hieracy.				var animated:Boolean = view.stage != null;				if(animated){					// implementation missing!				}else{					// implementation missing!				}				// sets the visible controller to whatever.				_visibleViewController = controller;				this.title = _visibleViewController.title;				// removes the reference for this a parent (UIViewController.parentController).				var pop:Array =  _viewControllers.splice(index+1);				for(var i:int = 0;i<pop.length;i++){					controller = pop[i];					removeChild(controller);				}				return pop;			}			return null;		}				//------------------------------------		// Configuring the Navigation bar.		//------------------------------------				/**		 * 		 */		public function set navigationBarHidden(value:Boolean):void{					}		//		public function get navigationBarHidden():Boolean{			return false;		}				//------------------------------------		// Getting Related Views.		//------------------------------------				/**		 * The navigation bar managed by the navigation controller.		 * 		 * <p>		 * 		 * </p>		 */		public function get navigationBar():UINavigationBar{			return _navigationView.navigationBar;		}				/*		It is permissible to modify the barStyle or translucent properties of the navigation bar but you must never change its frame, bounds, or alpha values directly. To show or hide the navigation bar, you should always do so through the navigation controller by changing its navigationBarHidden property or calling the setNavigationBarHidden:animated: method.		*/				/**		 * The custom toolbar associated with the navigation controller.		 * 		 * <p>This property contains a reference to the built-in toolbar managed by the navigation controller.</p>		 */		public function get toolbar():UIToolbar{			return _navigationView.toolbar;		}				/*		This property contains a reference to the built-in toolbar managed by the navigation controller.		Access to this toolbar is provided solely for clients that want to present an action sheet from the toolbar. You should not modify the UIToolbar object directly.				Management of this toolbar’s contents is done through the custom view controllers associated with this navigation controller. For each view controller on the navigation stack, you can assign a custom set of toolbar items using the setToolbarItems:animated: method of UIViewController.				The visibility of this toolbar is controlled by the toolbarHidden property. The toolbar also obeys the hidesBottomBarWhenPushed property of the currently visible view controller and hides and shows itself automatically as needed.			*/				/**		 * @inheritDoc		 */		override public function set view(value:UIView):void{			throw new Error("the view property is read-only");		}		// creates if need and returns the view.		override public function get view():UIView{			if(!_navigationView){				_navigationView = new UINaviagtionView();				_navigationView.navigationBar.backButton.callback = popViewController;			}			return _navigationView;		}				//------------------------------------		// REMOVE THAT BELLOW!		//------------------------------------				//		private function onViewRender(e:Event):void{			if(this.visibleViewController)				resize(this.visibleViewController.view);		}				//		private function resize(view:UIView):void{			view.y = 32;			view.height = this.view.height-32;			view.width = this.view.width;		}			}}import flash.display.Shape;import flash.display.Sprite;import flash.geom.Rectangle;import se.raweden.motion.Tween;import se.raweden.ui.view.UINavigationBar;import se.raweden.ui.view.UIToolbar;import se.raweden.ui.view.UIView;
/** * A <code>UINavigationView</code> * * Copyright 2011, Raweden. All Rights Reserved. * * @author Raweden */class UINaviagtionView extends UIView{		// Related Views.	private var m_navigationBar:UINavigationBar;	private var m_toolbar:UIToolbar;	private var m_content:Sprite = new Sprite();	private var m_mask:Shape;		private var m_views:Array;		public function UINaviagtionView(){		addChildren();		init();	}		private function addChildren():void{		m_content = new Sprite();		m_mask = new Shape();		m_mask.graphics.beginFill(0x000000);		m_mask.graphics.drawRect(0,0,100,100);		m_mask.graphics.endFill();		m_content.mask = m_mask;		m_content.addChild(m_mask);		this.addChild(m_content);	}	private function init():void{		m_views = new Array();	}		//------------------------------------	// Getting Related Views.	//------------------------------------		/**	 * 	 */	public function get navigationBar():UINavigationBar{		if(!m_navigationBar){			m_navigationBar = new UINavigationBar(this);			needs("layout",layout);		}		return m_navigationBar;	}		/**	 * 	 */	public function get toolbar():UIToolbar{		if(!m_toolbar){			m_toolbar = new UIToolbar(this);			needs("layout",layout);		}		return m_toolbar;	}		// Managing View.		public function pushView(view:UIView, animated:Boolean = true):void{		var index:int = m_views.indexOf(view);		if(index == -1 && view != null){			var len:int = m_views.length;			var x:int = len > 0 ? len*width : 0;			var height:Number = this.height-m_navigationBar.height;			if(m_toolbar){				height -= m_toolbar.height;			}			view.resize(width,height);			view.x = x;			view.y = 0;			m_content.addChild(view);			if(animated){				Tween.to(m_content,0.33,{x:-x}).start();				}else{				m_content.x = -x;			}			m_views.push(view);			trace("pushing view, x:",x);		}		/*		var index:int = _viewControllers.indexOf(controller);		var animated:Boolean = (view.stage == null || _viewControllers.length == 0) ? false : true;		// makes sure that the controller have not already been added to the hieracy.		if(index == -1  && controller != null){			var a:UIView = this.visibleViewController.view;			var b:UIView = controller.view;			if(animated){				resize(b);				b.x = view.width;				view.addChild(b);				Tweener.addTween(a,{time:0.7,x:-view.width});				Tweener.addTween(b,{time:0.7,x:0});								}// we dont use tweener here.			else{				// implementation missing!			}			_visibleViewController = controller;			addChild(controller);			_viewControllers.push(controller);			//navigationBar.push(controller.navigationItem,animated);			this.title = controller.title;		}				*/	}		public function popToView(view:UIView,animated:Boolean = true):void{		if(m_views.length > 1){			var a:UIView = m_views.pop();			if(animated){				var len:int = m_views.length-1;				var x:int = len > 0 ? len*width : 0;				trace("poping view, x:",x);				/*				view.resize(width,height);				view.x = x;				view.y = 0;				m_content.addChild(view);				*/				if(animated){					Tween.to(m_content,0.33,{x:-x}).start();					}else{					m_content.x = -x;				}			}		}				/*		if(_viewControllers.length > 1){	// makes the popViewController stop when its is at the root.			trace("do pop length:",_viewControllers.length);			var animated:Boolean = view.stage != null;			var controller:UIViewController = _viewControllers.pop();			if(animated){				var a:UIView = controller.view;				var b:UIView = this.visibleViewController.view;				resize(b);				b.x = -view.width;				view.addChild(b);				Tweener.addTween(a,{time:0.7,x:view.width});				Tweener.addTween(b,{time:0.7,x:0});							}// we dont use tweener here.			else{				// implementation missing!			}				navigationBar.pop(animated);			return controller;		}		trace("skipped pop length:",_viewControllers.length);		return null;		*/	}		//------------------------------------	// Updating Content Displayed.	//------------------------------------		/**	 * @inheritDoc	 */	override protected function layout(rect:Rectangle):void{		var height:Number = rect.height;		var width:Number = rect.width;		if(m_navigationBar){			m_navigationBar.width = width;			m_content.y = m_navigationBar.height;			height -= m_navigationBar.height;		}else{			m_content.y = 0;		}		if(m_toolbar){			m_toolbar.width = width;			m_toolbar.y = rect.height-m_toolbar.height;			height -= m_toolbar.height;		}		// Resizing content mask to current size.		m_mask.width = width;		m_mask.height = height;		// resizing views.		for(var i:int = 0;i<m_views.length;i++){			var view:UIView = m_views[i];			if(view){				view.height = height;				view.width = width;			}		}	}		/**	 * @inheritDoc	 */	override protected function draw(rect:Rectangle):void{			}	}
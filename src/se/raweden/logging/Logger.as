package se.raweden.logging{	import flash.system.Capabilities;	/**	 * Description	 *	 * <p>Copyright 2011 Raweden. All rights reserved.</p>	 *	 * @author Raweden	 */	public class Logger{				// Class properties.		private static var _log:Logger;		// Console log properties.		private var _outputs:Vector.<ILogger>;		private var _buffer:Array;				/**		 * 		 */		public function Logger(){			_outputs = new Vector.<ILogger>;			_buffer = [];		}				//----------------------------		// Getting Shared ConsoleOutput.		//----------------------------				/**		 * 		 */		public static function get log():Logger{			if(!_log){				_log = new Logger();			}			return _log;		}				/**		 * 		 */		public static function get hasLogger():Boolean{			return _log != null;		}				//----------------------------		// Getting and Setting Attributes.		//----------------------------				//----------------------------		// Managing Outputs.		//----------------------------				/**		 * 		 * @param	output		 * @return		 */		public function addOutput(output:ILogger):Boolean{			if(_outputs.indexOf(output) == -1){				_outputs.push(output);				dump();				return true;			}			return false;		}				/**		 * 		 * @param	output		 * @return		 */		public function removeOutput(output:ILogger):Boolean{			var index:int = _outputs.indexOf(output);			if(index != -1){				_outputs.splice(index,1);				return true;			}			return false;		}				/**		 * 		 * @param	output		 * @return		 */		public function hasOutput(output:ILogger):Boolean{			return _outputs.indexOf(output) != -1;		}				//----------------------------		// Logging String.		//----------------------------				/**		 * 		 * @param	level		 * @param	line		 */		public final function log(level:Level,line:String):void{			var len:int = _outputs.length;			// send to buffer if no outputs exists.			for(var i:int = 0;i<len;i++){				_outputs[i].log(level,line);			}			_buffer.push([level,line]);		}		//----------------------------		// Collecting Buffer		//----------------------------				/**		 * 		 * @param	separator		 * @return		 */		public final function buffer(separator:String = "\n"):String{			var len:int = _buffer.length;			var lines:Array = [];			for(var i:int = 0;i<len;i++){				lines.push(_buffer[i][1]);			}			return lines.length > 0 ? lines.join(separator) : null;		}				public final function dump():void{			if(_buffer){				_buffer.length = 0;			}		}			}}
package se.raweden.desktop{	import flash.net.getClassByAlias;		import se.raweden.utils.IDeserializer;	import se.raweden.utils.ISerializer;	/**	 * Description	 * 	 * <p>Copyright 2011 Raweden. All rights reserved.</p>	 * 	 * @author Raweden	 */	public class UIPasteboardType{				public static const ITEM:String = "public.item";				public static const IMAGE:String = "public.image";						private static const ptypes:Object = {};				private var _id:String;		private var _name:String;		private var _tags:String;		private var _binding:String;		private var _contentType:String;		private var _inherit:Array;				private var _deserializer:IDeserializer;		private var _serializer:ISerializer;				public function UIPasteboardType(id:String,tags:Array,inherit:*,binding:String){			if(ptypes[id] != null) throw new Error("PasteboardType id \""+id+"\" isn't uniqe");			_id = id;			ptypes[id] = this;			// making inherit.			if(inherit is Array){				this.confirm.apply(this,inherit);			}else if(inherit is String){				this.confirm(inherit);			}		}				private function confirm(...args:*):void{			if(!args)return			if(!_inherit)				_inherit = [];			var arg:*;			var type:UIPasteboardType;			while(args.length > 0){				arg = args.shift();				if(arg is UIPasteboardType){					type = arg;									}else if(arg is String){					type = ptypes[arg];				}				//				if(type && _inherit.indexOf(arg) == -1){					_inherit.push(type);				}else if(!type){					trace(" === DEFINITION OF "+arg+" IS MISSING");				}			}			//_inherit = inherit.length > 0 ? inherit : null;		}				// Getting And Setting Attributes.				/**		 * 		 */		public final function get id():String{			return _id;		}				/**		 * Determine the MIME type equal for the pasteboard type.		 */		public final function get contentType():String{			return _contentType		}				/**		 * 		 */		public final function get inherit():Array{			return _inherit ? _inherit.concat() : null;		}				/**		 * 		 */		public final function get name():String{			return null;		}				/**		 * Determine whether the type is serilizable.		 */		public final function get serilizable():Boolean{			try{				getClassByAlias(id);			}catch(error:ReferenceError){				return false;			}			return true;		}				// Managing Serialization and Deserialization.				/**		 * 		 */		public final function set deserializer(value:IDeserializer):void{			_deserializer = value;		}		// returns the deserializer used.		public final function get deserializer():IDeserializer{			return _deserializer;		}				/**		 * 		 */		public final function set serializer(value:ISerializer):void{			_serializer = value;		}		// returns the serializer used.		public final function get serializer():ISerializer{			return _serializer;		}				// Managing Types				/**		 * 		 */		public static function get types():Array{			var types:Array = [];			for(var id:String in ptypes){				types.push(id);			}			return types.length > 0 ? types : null;		}						/**		 * @inheritDoc		 */		public function toString():String{			return _id;			//return "[PasteboardType \""+_id+"\"]";		}			}}import se.raweden.desktop.UIPasteboardType;/*const TYPE_UTF8_PLAIN_TEXT:PasteboardType = new PasteboardType("public.text","txt,text/plain");const TYPE_URL:PasteboardType = new PasteboardType("public.url",null,"flash.net.URLRequest");const TYPE_PNG:PasteboardType = new PasteboardType("public.png","png,image/png","flash.display.BitmapData");const TYPE_JPEG:PasteboardType = new PasteboardType("public.jpeg","jpeg,image/jpeg","flash.display.BitmapData");*/
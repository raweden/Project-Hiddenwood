////	UIViewController.as//	Core UI Framework////	Created by Jesper Svensson on 2011-07//	Copyright 2011 Jesper Svensson. All rights reserved.//package se.raweden.ui{	import flash.events.EventDispatcher;		import se.raweden.core.core;	import se.raweden.ui.view.UIView;		/**	 * The UIViewController class provides the fundametnal view-manager model for applications.	 * 	 * <p>The basic view controlelr class supports the presentation of associated views in addition to basic support	 * for managing modal views. The controller is designed to manage a self-contained unit of content.</p>	 * 	 * <p>Subclasses such as NavigationController and TabBarController provide additional behavior for managing	 * complex hierarchies of view controllers and views.</p>	 * 	 * @author Raweden.	 */	public class UIViewController extends EventDispatcher{				use namespace core;				private var m_title:String;		// holds related controllers.		core var m_modalViewController:UIViewController;		core var m_parentViewController:UIViewController;		// holds the view and view related variables.		private var m_view:UIView;		// holds variabels related to modal presentation.		private var m_modalPresentation:String;		private var m_modalTransition:String;		private var m_modalSession:UIModalSession;			// holds the current modal session.				/**		 * Constuctor.		 */		public function UIViewController(){			super();			// setting the default modal style.			this.m_modalPresentation = UIModalPresentation.FullScreen;			this.m_modalTransition = UIModalTransition.CoverVertical;		}				//------------------------------------		// Manage the view		//------------------------------------				/**		 * A localized string that represents the view that this controller manages.		 * 		 * <p>This properity should be set to a human-readble string that represents the view to the user.		 * If the receiver is a navigation controller, the default is the top view controller's title.</p>		 */		public function set title(value:String):void{			m_title = value;		}		// indicatets the current title.		public function get title():String{			return m_title;		}				/**		 * The view stored in this property represents the view for this view controller.		 * 		 * <p>The default implementation of this properity is null, 		 * but other subclasses may by default set this value to a view.</p>		 * @default <code>null</code>		 */		public function set view(value:UIView):void{			m_view = value;		}		// returns the view that this controller manages.		public function get view():UIView{			return m_view;		}				//------------------------------------		// Getting related Controllers.		//------------------------------------				/** 		 * The controller that is active presented as a modal controller for this UIViewController instance.		 * 		 * <p>Typically, a modal view is used to present an edit page or additional detals of a model object.		 * The modal view is optionally displayed using a vertical sheet transition.</p>		 */		public function get modalViewController():UIViewController{			return m_modalViewController;		}				/**		 * The parent of the current view controller.		 * 		 * <p>Parent view controller are relevant in navigation, tab bar, and modal view controller hierarchies.		 * In each of these hierarchies, the parent is the object responsible for displaying the current view controller.		 * If you are using a view controller as a standalone object-that is, not as part of a view controller hierarchy-the		 * Value in this property is null.</p>		 */		public function get parentViewController():UIViewController{			return m_parentViewController;		}				//------------------------------------		// Configuring and presenting modal views.		//------------------------------------				/**		 * The presentation style used when this controller is presented modaly.		 * 		 * <p>The presentation style determines how this controller is resized 		 * and positoned when presented as modal controller on the screen.</p>		 * @default <code>UIModalPresentation.FullScreen</code>		 * @see UIModalPresentation		 */		public function set modalPresentation(value:String):void{			m_modalPresentation = value;		}		// returns the current modal presetnation style.		public function get modalPresentation():String{			return m_modalPresentation;		}				/**		 * Specifies the transiton style used when this view controller is presented modaly.		 * 		 * <p>This property determines how the view is presented to the user.</p>		 * @default <code>UIModalTransition.CoverVertical</code>		 * @see UIModalTransition		 */		public function set modalTransition(value:String):void{			m_modalTransition = value;		}		// returns the current modal transiton style.		public function get modalTransition():String{			return m_modalTransition;		}				/**		 * Presents a modal view managed by the <code>viewController</code> to the user.		 * 		 * <p>Typically, a modal view is presented to provide a edit page or to show		 * additional details about a object.</p>		 */		public final function presentModalViewController(viewController:UIViewController):void{			if(m_modalViewController == viewController)return;			if(!m_modalSession){				var animated:Boolean = view ? view.stage != null : false;				m_modalSession = new UIModalSession(this,viewController);					m_modalSession.present();			}else{				m_modalSession.dismiss(viewController);				m_modalSession = null;			}		}				/**		 * Dismiss the modal view that where presented on this UIViewController.		 * 		 * <p></p>		 */		public final function dismissModalViewController():void{			if(m_modalSession){				var animated:Boolean = view ? view.stage != null : false;				m_modalSession.dismiss();				m_modalSession = null;				}		}					}}import caurina.transitions.Tweener;import flash.display.Sprite;import flash.events.Event;import flash.events.MouseEvent;import se.raweden.core.core;import se.raweden.ui.UIModalPresentation;import se.raweden.ui.UIModalTransition;import se.raweden.ui.UIViewController;import se.raweden.ui.view.UIView;////////////class UIModalSession{		use namespace core;		private var presentation:String;	private var transition:String;	private var m_width:int;	private var m_height:int;	// controllers.	private var parentController:UIViewController;	private var modalController:UIViewController;		// used when dismissed.	private var replacement:UIViewController;		private var m_blocker:Sprite;		public function UIModalSession(parentController:UIViewController,modalController:UIViewController){		// setting reference.		this.parentController = parentController;		this.modalController = modalController;		// getting the presentation style to use.		if(modalController.modalPresentation != UIModalPresentation.Current){			presentation = modalController.modalPresentation;		}else if(parentController.modalPresentation != UIModalPresentation.Current){			presentation = parentController.modalPresentation;		}else{			presentation = UIModalPresentation.FullScreen;		}		// getting the transtion style to be used.		transition = modalController.modalTransition;				// setting state.		m_width = modalController.view.width;		m_height = modalController.view.height;		// adding listner to parent resize.		parentController.view.addEventListener(Event.RESIZE,onParentViewResize);	}		//------------------------------------	// Session Presenting.	//------------------------------------		public function present():void{		var view:UIView = modalController.view;		switch(transition){			case UIModalTransition.CoverVertical:{				view.y = parentController.view.height;				Tweener.addTween(view,{time:0.7,y:0});			}break;			case UIModalTransition.CrossDissolve:{				view.alpha = 0;				if(presentation == UIModalPresentation.Page || presentation == UIModalPresentation.Form){					var blocker:Sprite = addBlocker();					blocker.alpha = 0;					Tweener.addTween(blocker,{time:0.4,alpha:0.75});					Tweener.addTween(view,{time:0.7,alpha:1,delay:0.2});				}else{					Tweener.addTween(view,{time:0.7,alpha:1});				}			}break;		}		parentController.view.addChild(view);		render();		parentController.m_modalViewController = modalController;		modalController.m_parentViewController = parentController;	}		//------------------------------------	// Session Dismissal.	//------------------------------------		/**	 * Dismisses the session.	 * @param replacement A optional replacement for this modal view.	 */	public function dismiss(replacement:UIViewController = null):void{		var view:UIView = modalController.view;		switch(transition){			case UIModalTransition.CoverVertical:{				Tweener.addTween(view,{time:0.7,y:parentController.view.height,onComplete:onDismissComplete});			}break;			case UIModalTransition.CrossDissolve:{				if(presentation == UIModalPresentation.Page || presentation == UIModalPresentation.Form){					Tweener.addTween(m_blocker,{time:0.4,alpha:0,delay:0.5,onComplete:onDismissComplete});					Tweener.addTween(view,{time:0.7,alpha:0});				}else{					Tweener.addTween(view,{time:0.7,alpha:0,onComplete:onDismissComplete});				}			}break;		}		this.replacement = replacement;		// we need to dismiss that to.		if(modalController.m_modalViewController){			modalController.dismissModalViewController();		}		modalController.m_parentViewController = null;		parentController.m_modalViewController = null;		//parentController.view.addChild(view);	}	// triggerd after the dismiss animation is complete	private function onDismissComplete():void{		if(replacement){			parentController.presentModalViewController(replacement);		}		this.destory();	}		// disposes the session object.	private function destory():void{		parentController.view.removeEventListener(Event.RESIZE,onParentViewResize);		modalController.view.removeFromParent();		modalController = null;		parentController = null;		replacement = null;		if(m_blocker){			m_blocker.removeEventListener(MouseEvent.CLICK,onBlockerClick);			removeBlocker();		}	}		//------------------------------------	// Responding to resize.	//------------------------------------		// responds to the parent resize.	private function onParentViewResize(e:Event):void{		render();	}		// positionates and/or resizes the view presented modaly.	private function render():void{		var w:int = parentController.view.width;		var h:int = parentController.view.height;		trace("render UIModalSession Resize"); 		var view:UIView = modalController.view;		switch(presentation){			// applying modal fullsceen presentation style.			case UIModalPresentation.FullScreen:{				view.width = w;				view.height = h;			}break;			// applying modal form-like presentation style.			case UIModalPresentation.Form:{				// resizing or centering the modal view horizontal.				if(m_width > w){					view.width = w;					if(view.x != 0)						view.x = 0;				}else{					view.x = (w-view.width)*0.5;				}				// resizing or centering the modal view verticaly.				if(m_height > h){					view.height = h;					if(view.y != 0)						view.y = 0;				}else{					view.y = (h-view.height)*0.5;				}				// resizing the dimming block.				if(m_blocker){					m_blocker.width = w;					m_blocker.height = h;					}			}break;			// applying modal page-like presentation style.			case UIModalPresentation.Page:{				// resizing or centering the modal view horizontal.				if(m_width > w){					view.width = w;					if(view.x != 0)						view.x = 0;				}else{					view.x = (w-m_width)*0.5;				}				// resizing or centering the modal view verticaly.				view.height = h;				if(view.y != 0)					view.y = 0;				// resizing the dimming block.				if(m_blocker){					m_blocker.width = w;					m_blocker.height = h;					}			}break;		}	}		//------------------------------------	// Handeling blocker.	//------------------------------------		// adds a blocking background this should only be used with presentation style UIModalPresentation.Page or UIModalPresentation.Form	private function addBlocker():Sprite{		if(m_blocker)return m_blocker;		// creates a sprite to act as a blocker.		m_blocker = new Sprite();		m_blocker.graphics.beginFill(0x2D2D2D);		m_blocker.graphics.drawRect(0,0,100,100);		m_blocker.graphics.endFill();		parentController.view.addChild(m_blocker);		m_blocker.addEventListener(MouseEvent.CLICK,onBlockerClick);		return m_blocker;	}		// removes the blocking background if any where created.	private function removeBlocker():void{		if(!m_blocker)return;		m_blocker.graphics.clear();		if(m_blocker.parent)			m_blocker.parent.removeChild(m_blocker);		m_blocker = null;	}		// repsonds to the click on the blocking background.	private function onBlockerClick(e:Event):void{		parentController.dismissModalViewController();		m_blocker.removeEventListener(MouseEvent.CLICK,onBlockerClick);	}			}